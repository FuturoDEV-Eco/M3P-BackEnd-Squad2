{
  "swagger": "2.0",
  "info": {
    "title": "Destino Certo - API",
    "description": "Documentação da Destino Certo - API - projeto final módulo 02",
    "version": "1.0.0"
  },
  "host": "localhost:3001",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "securityDefinitions": {
    "apiKeyAuth": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "Insira o token JWT"
    }
  },
  "paths": {
    "/login": {
      "post": {
        "tags": [
          "Login"
        ],
        "description": "Endpoint para logar um usuário e criar um token para acesso. <br><br> <b>Importante:</b> Para utilizar as rotas protegidas no Swagger, adicione <code>Bearer &lt;token&gt;</code> no campo de autorização.",
        "parameters": [
          {
            "name": "loginUsuario",
            "in": "body",
            "description": "Login do usuário",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "raquelninacosta@kof.com.mx"
                },
                "password": {
                  "type": "string",
                  "example": "Teste123!"
                }
              },
              "required": [
                "email",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login bem-sucedido, token gerado com sucesso.",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        },
                        "description": {
                          "type": "string",
                          "example": "Token JWT gerado para o usuário."
                        }
                      }
                    },
                    "id": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "integer"
                        },
                        "description": {
                          "type": "string",
                          "example": "ID do usuário."
                        }
                      }
                    },
                    "name": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        },
                        "description": {
                          "type": "string",
                          "example": "Nome do usuário."
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Email e senha são obrigatórios."
          },
          "404": {
            "description": "Usuário não encontrado ou senha incorreta."
          },
          "500": {
            "description": "Erro interno do servidor."
          }
        }
      }
    },
    "/usuarios/count": {
      "get": {
        "tags": [
          "Usuários"
        ],
        "description": "Endpoint para contar o número de usuários cadastrados.",
        "responses": {
          "200": {
            "description": "Número de usuários retornado com sucesso.",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "example": 123
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Erro interno do servidor."
          }
        }
      }
    },
    "/usuarios/{id}/count-collect-points": {
      "get": {
        "tags": [
          "Usuários"
        ],
        "description": "Endpoint para contar o número de pontos de coleta relacionados ao usuário.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID do usuário"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Número de pontos de coleta retornado com sucesso.",
            "schema": {
              "type": "object",
              "properties": {
                "collectionPointsCount": {
                  "type": "number",
                  "example": 5
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Usuário não autenticado."
          },
          "404": {
            "description": "Usuário não encontrado."
          },
          "500": {
            "description": "Erro interno do servidor."
          }
        }
      }
    },
    "/usuarios/criar": {
      "post": {
        "tags": [
          "Usuários"
        ],
        "description": "Endpoint para criar um usuário. Senha deve conter no mínimo 8 caracteres, incluindo maiúscula, minúscula e caractere especial. O CPF deve ser válido.",
        "parameters": [
          {
            "name": "criarUsuario",
            "in": "body",
            "description": "Dados do usuário",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Nelson Marcos Vinicius Oliveira"
                },
                "cpf": {
                  "type": "string",
                  "example": "86288575917"
                },
                "gender": {
                  "type": "string",
                  "example": "M"
                },
                "email": {
                  "type": "string",
                  "example": "nelsonmarcosoliveira@kimmay.com.br"
                },
                "password": {
                  "type": "string",
                  "example": "Teste123!"
                },
                "birthdate": {
                  "type": "string",
                  "example": "1975-08-02"
                },
                "postalcode": {
                  "type": "string",
                  "example": "88067108"
                },
                "street": {
                  "type": "string",
                  "example": "Servidão Manoel Barbosa"
                },
                "neighborhood": {
                  "type": "string",
                  "example": "Pântano do Sul"
                },
                "city": {
                  "type": "string",
                  "example": "Florianópolis"
                },
                "state": {
                  "type": "string",
                  "example": "SC"
                },
                "number": {
                  "type": "string",
                  "example": "634"
                }
              },
              "required": [
                "name",
                "cpf",
                "gender",
                "email",
                "password",
                "birthdate",
                "postalcode",
                "street",
                "neighborhood",
                "city",
                "state",
                "number"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Usuário criado com sucesso."
          },
          "400": {
            "description": "Dados inválidos fornecidos."
          },
          "409": {
            "description": "CPF ou email já existem."
          },
          "500": {
            "description": "Erro interno do servidor."
          }
        }
      }
    },
    "/usuarios/{id}": {
      "delete": {
        "tags": [
          "Usuários"
        ],
        "description": "Endpoint para excluir um usuário pelo ID. A exclusão só será permitida se não houver pontos de coleta relacionados ao usuário. Além disso, um usuário só pode excluir sua própria conta.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID do usuário"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Usuário excluído com sucesso."
          },
          "400": {
            "description": "Usuário possui pontos de coleta relacionados e não pode ser excluído."
          },
          "403": {
            "description": "Você somente pode excluir sua própria conta."
          },
          "404": {
            "description": "Usuário não encontrado."
          },
          "500": {
            "description": "Erro interno do servidor."
          }
        }
      },
      "get": {
        "tags": [
          "Usuários"
        ],
        "description": "Endpoint para buscar usuário por ID. Acesso restrito a administradores.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID do usuário"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Usuário retornado com sucesso.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "Admin Teste"
                },
                "email": {
                  "type": "string",
                  "example": "admin@admin.com"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Usuário não autenticado."
          },
          "403": {
            "description": "Acesso negado. Apenas administradores podem acessar este recurso."
          },
          "404": {
            "description": "Usuário não encontrado."
          },
          "500": {
            "description": "Erro interno do servidor."
          }
        }
      },
      "put": {
        "tags": [
          "Usuários"
        ],
        "description": "Endpoint para atualizar usuário por ID. Acesso restrito a administradores.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID do usuário"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "updateUser",
            "in": "body",
            "description": "Dados atualizados do usuário",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Nome atualizado"
                },
                "email": {
                  "type": "string",
                  "example": "emailatualizado@exemplo.com"
                }
              },
              "required": [
                "name",
                "email"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Usuário atualizado com sucesso."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Usuário não autenticado."
          },
          "403": {
            "description": "Acesso negado. Apenas administradores podem acessar este recurso."
          },
          "404": {
            "description": "Usuário não encontrado."
          },
          "500": {
            "description": "Erro interno do servidor."
          }
        }
      }
    },
    "/usuarios/logged-user": {
      "get": {
        "tags": [
          "Usuários"
        ],
        "description": "Endpoint para buscar dados do usuário logado.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Dados do usuário retornados com sucesso.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "Admin Teste"
                },
                "email": {
                  "type": "string",
                  "example": "admin@admin.com"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Usuário não autenticado."
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Erro interno do servidor."
          }
        }
      },
      "put": {
        "tags": [
          "Usuários"
        ],
        "description": "Endpoint para atualizar dados do usuário logado.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "updateUser",
            "in": "body",
            "description": "Dados atualizados do usuário",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Nome atualizado"
                },
                "email": {
                  "type": "string",
                  "example": "emailatualizado@exemplo.com"
                }
              },
              "required": [
                "name",
                "email"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dados atualizados com sucesso."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Usuário não autenticado."
          },
          "500": {
            "description": "Erro interno do servidor."
          }
        }
      }
    },
    "/usuarios/check-collection-points": {
      "get": {
        "tags": [
          "Usuários"
        ],
        "description": "Endpoint para verificar se o usuário autenticado possui pontos de coleta. O ID do usuário é extraído do token JWT.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Verificação de pontos de coleta realizada com sucesso.",
            "schema": {
              "type": "object",
              "properties": {
                "hasCollectionPoints": {
                  "type": "boolean",
                  "example": true
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Usuário não encontrado ou não possui pontos de coleta."
          },
          "500": {
            "description": "Erro interno do servidor."
          }
        }
      }
    },
    "/local/count-all": {
      "get": {
        "tags": [
          "Pontos de Coleta"
        ],
        "description": "Endpoint para obter a contagem total de pontos de coleta.",
        "responses": {
          "200": {
            "description": "Contagem de pontos de coleta retornada com sucesso."
          },
          "500": {
            "description": "Erro interno do servidor."
          }
        }
      }
    },
    "/local/all": {
      "get": {
        "tags": [
          "Pontos de Coleta"
        ],
        "description": "Endpoint para listar todos os pontos de coleta disponíveis no sistema.",
        "responses": {
          "200": {
            "description": "Lista de pontos de coleta retornada com sucesso."
          },
          "500": {
            "description": "Erro interno do servidor."
          }
        }
      }
    },
    "/local/": {
      "post": {
        "tags": [
          "Pontos de Coleta"
        ],
        "description": "Endpoint para criar um ponto de coleta. Somente usuários autenticados podem criar um ponto de coleta e o ponto de coleta será veiculado ao usuário autenticado. Todos os campos são obrigatórios. Caso o CEP não seja encontrado na nominatim.openstreetmap, as colunas latitude, longitude e map_link serão preenchidas com null. Se tudo der certo, o sistema retornará status 201 com as informações do novo ponto de coleta. Se houver erro, o sistema retornará status 500 com a mensagem: Erro interno do servidor // Internal Server Error e o erro será exibido no console.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "criarPontoDeColeta",
            "in": "body",
            "description": "Dados do ponto de coleta",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Ponto Dakir Polidoro"
                },
                "description": {
                  "type": "string",
                  "example": "Este é um ponto de coleta da comcap para recolhimento de vidros"
                },
                "recycle_types": {
                  "type": "string",
                  "example": "Vidro, Papel, Plástico"
                },
                "postalcode": {
                  "type": "string",
                  "example": "88063-565"
                },
                "street": {
                  "type": "string",
                  "example": "Rua Radialista Dakir Polidoro"
                },
                "neighborhood": {
                  "type": "string",
                  "example": "Campeche"
                },
                "city": {
                  "type": "string",
                  "example": "Florianópolis"
                },
                "state": {
                  "type": "string",
                  "example": "SC"
                },
                "number": {
                  "type": "string",
                  "example": "123"
                }
              },
              "required": [
                "name",
                "description",
                "recycle_types",
                "postalcode",
                "street",
                "neighborhood",
                "city",
                "state",
                "number"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Ponto de coleta criado com sucesso."
          },
          "400": {
            "description": "Dados inválidos fornecidos."
          },
          "500": {
            "description": "Erro interno do servidor."
          }
        }
      },
      "get": {
        "tags": [
          "Pontos de Coleta"
        ],
        "description": "Endpoint para listar todos os pontos de coleta cadastrados pelo usuário autenticado. No momento do login, o id do usuário é armazenado no token. O endpoint usará esse id para garantir que apenas o usuário veja os pontos de coleta que ele criou.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de pontos de coleta retornada com sucesso."
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Erro interno do servidor."
          }
        }
      }
    },
    "/local/{local_id}": {
      "get": {
        "tags": [
          "Pontos de Coleta"
        ],
        "description": "Endpoint para obter detalhes de um ponto de coleta específico cadastrado pelo usuário autenticado. No momento do login, o id do usuário é armazenado no token. O endpoint usará esse id para garantir que apenas o usuário autenticado tenha acesso a essas informações.",
        "parameters": [
          {
            "name": "local_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID do ponto de coleta"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Detalhes do ponto de coleta retornados com sucesso."
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Ponto de coleta não encontrado."
          },
          "500": {
            "description": "Erro interno do servidor."
          }
        }
      },
      "delete": {
        "tags": [
          "Pontos de Coleta"
        ],
        "description": "Endpoint para excluir um ponto de coleta específico cadastrado pelo usuário autenticado. No momento do login, o id do usuário é armazenado no token. O endpoint usará esse id para garantir que apenas o usuário autenticado que criou o ponto de coleta tenha acesso a essas informações.",
        "parameters": [
          {
            "name": "local_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID do ponto de coleta"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "example": "any"
                },
                "description": {
                  "example": "any"
                },
                "recycle_types": {
                  "example": "any"
                },
                "postalcode": {
                  "example": "any"
                },
                "street": {
                  "example": "any"
                },
                "neighborhood": {
                  "example": "any"
                },
                "city": {
                  "example": "any"
                },
                "state": {
                  "example": "any"
                },
                "number": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ponto de coleta excluído com sucesso."
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Ponto de coleta não encontrado."
          },
          "500": {
            "description": "Erro interno do servidor."
          }
        }
      },
      "put": {
        "tags": [
          "Pontos de Coleta"
        ],
        "description": "Endpoint para atualizar informações de um ponto de coleta específico cadastrado pelo usuário autenticado. No momento do login, o id do usuário é armazenado no token. O endpoint usará esse id para garantir que apenas o usuário autenticado que criou o ponto de coleta possa alterá-lo. Todos os campos são obrigatórios. Caso o CEP não seja encontrado na nominatim.openstreetmap, as colunas latitude, longitude e map_link serão preenchidas com null. Se tudo der certo, o sistema retornará status 200 com as informações do ponto de coleta atualizado. Se houver erro, o sistema retornará status 500 com a mensagem: Erro interno do servidor // Internal Server Error e o erro será exibido no console.",
        "parameters": [
          {
            "name": "local_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID do ponto de coleta"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "atualizarPontoDeColeta",
            "in": "body",
            "description": "Dados atualizados do ponto de coleta",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Ponto Dakir Polidoro Atualizado"
                },
                "description": {
                  "type": "string",
                  "example": "Descrição atualizada do ponto de coleta"
                },
                "recycle_types": {
                  "type": "string",
                  "example": "Vidro, Papel, Plástico"
                },
                "postalcode": {
                  "type": "string",
                  "example": "88063-565"
                },
                "street": {
                  "type": "string",
                  "example": "Rua Radialista Dakir Polidoro"
                },
                "neighborhood": {
                  "type": "string",
                  "example": "Campeche"
                },
                "city": {
                  "type": "string",
                  "example": "Florianópolis"
                },
                "state": {
                  "type": "string",
                  "example": "SC"
                },
                "number": {
                  "type": "string",
                  "example": "123"
                }
              },
              "required": [
                "name",
                "description",
                "recycle_types",
                "postalcode",
                "street",
                "neighborhood",
                "city",
                "state",
                "number"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ponto de coleta atualizado com sucesso."
          },
          "400": {
            "description": "Dados inválidos fornecidos."
          },
          "404": {
            "description": "Ponto de coleta não encontrado."
          },
          "500": {
            "description": "Erro interno do servidor."
          }
        }
      }
    },
    "/local/{local_id}/maps": {
      "get": {
        "tags": [
          "Pontos de Coleta"
        ],
        "description": "Endpoint para obter o link do Google Maps de um ponto de coleta específico cadastrado pelo usuário autenticado. Se o ponto de coleta não for encontrado, o sistema tentará gerar o link pelo CEP. Se o CEP não for encontrado, o endpoint retornará status 404 com a mensagem: O CEP não foi encontrado, então o link para o Google Maps é nulo // The postal code was not found, so the Google Maps link is null. Somente o usuário que criou o ponto de coleta pode acessar o link.",
        "parameters": [
          {
            "name": "local_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID do ponto de coleta"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Link do Google Maps retornado com sucesso.",
            "schema": {
              "type": "object",
              "properties": {
                "map_link": {
                  "type": "string",
                  "example": "https://www.google.com/maps?q=latitude,longitude"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Ponto de coleta ou CEP não encontrado."
          },
          "500": {
            "description": "Erro interno do servidor."
          }
        }
      }
    }
  },
  "security": [
    {
      "apiKeyAuth": []
    }
  ]
}